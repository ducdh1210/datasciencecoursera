# STEP 6: Add header to the dataset
# header of the first two columns are Subject and Activity
colnames(df_General)[1:2]<-c('Subject', 'Activity')
# from 3rd column to the last column, the headers are obtained from ft_feature
colnames(df_General)[3:length(df_General)] <- as.character(ft_feature)
##############################################################
# *STEP 7: Data Analysis --> find mean based on subject and activity
# load data table package
library(data.table)
# create data table variabel from df_General
dt_General <- data.table(df_General)
# take all columns except first two, split them by the couple (Subject - Activity), and find mean to each splitted group
# credit to: http://lamages.blogspot.com/2012/01/say-it-in-r-with-by-apply-and-friends.html
dt_Refined_General <- dt_General[,lapply(.SD,mean),by="Subject,Activity",.SDcols=3:length(dt_General)]
# reorder the rows based on Subject - Activity
dt_Refined_General <- dt_Refined_General[order(dt_Refined_General$Subject,dt_Refined_General$Activity),]
##############################################################
# STEP 8: Write to .txt file
write.table(dt_Refined_General, "tidy_data.txt", sep="\t", row.names = F, col.names = T)
setwd("~/Desktop/Coursera/Data_Science_PR/CleanData_PeerReview")
##############################################################
# STEP 2: Read tables (df_ refers to dataframe)
# read activity labels
df_activity <- read.table(file="./UCI HAR Dataset/activity_labels.txt")
# read the features (measurement names)
df_features <- read.table(file="./UCI HAR Dataset/features.txt")
# read the subject data (indicating participant)
df_subj_train <- read.table(file="./UCI HAR Dataset/train/subject_train.txt")
df_subj_test <- read.table(file="./UCI HAR Dataset/test/subject_test.txt")
# read the observation data (values for row)
df_x_train <- read.table(file="./UCI HAR Dataset/train/X_train.txt")
df_x_test <- read.table(file="./UCI HAR Dataset/test/X_test.txt")
# read the label data (activity labels for column names)
df_y_train <- read.table(file="./UCI HAR Dataset/train/y_train.txt")
df_y_test <- read.table(file="./UCI HAR Dataset/test/y_test.txt")
##############################################################
# STEP 3: row binding (subject train, subjest test), (X_train, X_test), (Y_Train, Y_Test)
df_subj = rbind(df_subj_train, df_subj_test)
df_x = rbind(df_x_train, df_x_test)
df_y = rbind(df_y_train, df_y_test)
# in df_y, convert numeric value to activity name
df_y$V1 <- factor(df_y$V1, df_activity[,1], df_activity[,2])
##############################################################
# STEP 4: from feature table, get and clean feature labels relating to mean and std
# get a factor, which is the second column of df_features
ft_feature <- df_features[,2];
# create a vector whose each element is the index of the row referring to a mean measure
vt_mean <- grep("-mean()", fixed=TRUE, ft_feature)
# create a vector whose each element is the index of the row referring to a mean measure
vt_std <-  grep("-std()", fixed=TRUE, ft_feature)
# combining those two above vectors and sort the indexes
vt_col <- c(vt_mean,vt_std)
vt_col <- sort(vt_col)
# keep only labels which contains "mean" and "std" in its name
ft_feature <- ft_feature[vt_col];
##############################################################
# STEP 5: Refine dataset df_x and add subject and activity columns to it
# refine df_x so that it only contains columns refering measures of mean or std
df_x <- df_x[,vt_col]
# add subject and activity columns to df_x
df_General <- cbind(df_subj, df_y, df_x)
##############################################################
# STEP 6: Add header to the dataset
# header of the first two columns are Subject and Activity
colnames(df_General)[1:2]<-c('Subject', 'Activity')
# from 3rd column to the last column, the headers are obtained from ft_feature
colnames(df_General)[3:length(df_General)] <- as.character(ft_feature)
##############################################################
# *STEP 7: Data Analysis --> find mean based on subject and activity
# load data table package
library(data.table)
# create data table variabel from df_General
dt_General <- data.table(df_General)
# take all columns except first two, split them by the couple (Subject - Activity), and find mean to each splitted group
# credit to: http://lamages.blogspot.com/2012/01/say-it-in-r-with-by-apply-and-friends.html
dt_Refined_General <- dt_General[,lapply(.SD,mean),by="Subject,Activity",.SDcols=3:length(dt_General)]
# reorder the rows based on Subject - Activity
dt_Refined_General <- dt_Refined_General[order(dt_Refined_General$Subject,dt_Refined_General$Activity),]
##############################################################
# STEP 8: Write to .txt file
write.table(dt_Refined_General, "tidy_data.txt", sep="\t", row.names = F, col.names = T)
install.packages("data.table")
setwd("~/Desktop/Coursera/Data_Science_PR/GetCleanData_PeerReview")
##############################################################
# NAME: Duc Do                                               #
# CLASS: Coursera, Data Science: Getting and Cleaning Data   #
# Course Project (Peer Review)                               #
# May 24, 2014                                               #
##############################################################
#install.packages("data.table")
##############################################################
# STEP 1: Download and unzip files
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url,destfile="dataset.zip",method="curl")
unzip(zipfile="dataset.zip")
##############################################################
# STEP 2: Create tables from .txt files(df_ refers to dataframe)
# read activity labels
df_activity <- read.table(file="./UCI HAR Dataset/activity_labels.txt")
# read the features (measurement names)
df_features <- read.table(file="./UCI HAR Dataset/features.txt")
# read the subject data (indicating participant)
df_subj_train <- read.table(file="./UCI HAR Dataset/train/subject_train.txt")
df_subj_test <- read.table(file="./UCI HAR Dataset/test/subject_test.txt")
# read the observation data (values for row)
df_x_train <- read.table(file="./UCI HAR Dataset/train/X_train.txt")
df_x_test <- read.table(file="./UCI HAR Dataset/test/X_test.txt")
# read the label data (activity labels for column names)
df_y_train <- read.table(file="./UCI HAR Dataset/train/y_train.txt")
df_y_test <- read.table(file="./UCI HAR Dataset/test/y_test.txt")
##############################################################
# STEP 3: row binding (subject train, subjest test), (X_train, X_test), (Y_Train, Y_Test)
df_subj = rbind(df_subj_train, df_subj_test)
df_x = rbind(df_x_train, df_x_test)
df_y = rbind(df_y_train, df_y_test)
# in df_y, convert numeric value to activity name
df_y$V1 <- factor(df_y$V1, df_activity[,1], df_activity[,2])
##############################################################
# STEP 4: from feature table, get and clean feature labels relating to mean and std
# get a factor, which is the second column of df_features
ft_feature <- df_features[,2];
# create a vector whose each element is the index of the row referring to a mean measure
vt_mean <- grep("-mean()", fixed=TRUE, ft_feature)
# create a vector whose each element is the index of the row referring to a mean measure
vt_std <-  grep("-std()", fixed=TRUE, ft_feature)
# combining those two above vectors and sort the indexes
vt_col <- c(vt_mean,vt_std)
vt_col <- sort(vt_col)
# keep only labels which contains "mean" and "std" in its name
ft_feature <- ft_feature[vt_col];
##############################################################
# STEP 5: Refine dataset df_x and add subject and activity columns to it
# refine df_x so that it only contains columns refering measures of mean or std
df_x <- df_x[,vt_col]
# add subject and activity columns to df_x
df_General <- cbind(df_subj, df_y, df_x)
##############################################################
# STEP 6: Add header to the dataset
# header of the first two columns are Subject and Activity
colnames(df_General)[1:2]<-c('Subject', 'Activity')
# from 3rd column to the last column, the headers are obtained from ft_feature
colnames(df_General)[3:length(df_General)] <- as.character(ft_feature)
##############################################################
# *STEP 7: Data Analysis --> find mean based on subject and activity
# load data table package
library(data.table)
# create data table dt_General from df_General
dt_General <- data.table(df_General)
# take all columns except first two, split them by the couple (Subject - Activity), and find mean to each splitted group
# credit to: http://lamages.blogspot.com/2012/01/say-it-in-r-with-by-apply-and-friends.html
dt_Refined_General <- dt_General[,lapply(.SD,mean),by="Subject,Activity",.SDcols=3:length(dt_General)]
# reorder the rows based on Subject - Activity
dt_Refined_General <- dt_Refined_General[order(dt_Refined_General$Subject,dt_Refined_General$Activity),]
##############################################################
# STEP 8: Write to .txt file
write.table(dt_Refined_General, "tidy_data.txt", sep="\t", row.names = F, col.names = T)
setwd("~/Desktop/Coursera/Data_Science/datasciencecoursera")
setwd("~/Desktop/Coursera/Data_Science")
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
setwd("~/Desktop/Coursera/Data_Science/datasciencecoursera/Class_3")
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub("..","",gdpData$X.3,)
View(gdpData)
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
View(gdpData)
condition = (gdpData$X.3 != "..")
condition
gdpData$X.3 <- [gdpData$X.3(condition),]
gdpData$X.3 <- gdpData$X.3(condition)
gdpData$X.3 <- [gdpData$X.3[condition],]
gdpData$X.3 <- gdpData$X.3[condition],
gdpData$X.3 <- gdpData$X.3[condition]
gdpData <- gdpData[gdpData(condition),]
gdpData <- gdpData[gdpData[condition],]
gdpData <- gdpData[condition,]
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
condition = (gdpData$X.3 != ".." ! is.na(gpdData$X.3)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
condition = (gdpData$X.3 != ".." & is.na(gpdData$X.3)
gdpData <- gdpData[condition,]
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gpdData$X.3) | gdpData$X.3 == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gpdData$X.3) | gdpData$X.3 == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gpdData$X.3) | gdpData$X.3 == "")
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "")
gdpData <- gdpData[!bad_condition,]
View(gdpData)
length(gpdData)
length(gdpData)
dim(gdpData)
nrow(gpdData)
nrow(gdpData)
gdpData <- gdpData[2:nrow(gpdData),]
gdpData <- gdpData[2:nrow(gdPData),]
gdpData <- gdpData[2:nrow(gdpData),]
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "")
gdpData <- gdpData[!bad_condition,]
gdpData$X.3 <- gsub("..","",gdpData$X.3,)
gdpData <- gdpData[!bad_condition,]
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "")
gdpData <- gdpData[!bad_condition,]
View(gdpData)
download.file(fileUrl1, destfile="gdp.csv",method="curl")
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
download.file(fileUrl1, destfile="gdp.csv",method="curl")
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
View(gdpData)
View(gdpData)
View(gdpData)
fileUrl1 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1, destfile="gdp.csv",method="curl")
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
View(gdpData)
mean(gdpData$X.3)
mean(as.numeric(gdpData$X.3))
mean(as.numeric(as.character(gdpData$X.3)))
mean(as.numeric(as.character(gdpData$X.3)))
mean(as.numeric(as.character(gdpData$X.3)))
gdpData <- read.csv("gdp.csv")
View(gdpData)
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- gdpData[2:nrow(gdpData),]
str(gdpData)
as.numeric(gdpData$X3)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData$X.3 <- gsub(" ","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- gdpData[2:nrow(gdpData),]
str(gdpData)
as.numeric(gdpData$X3)
as.numeric(as.character(gdpData$X3))
class(gdpData$X3[1])
class(gdpData$X3)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData$X.3 <- gsub(" ","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- gdpData[2:nrow(gdpData),]
class(gdpData$X3)
class(gdpData)
str(gdpData)
test <- as.numeric(gdpData$X3)
test <- as.character(gdpData$X3)
test <- as.data.frame(gdpData$X3)
test <- gdpData$X3
test <- as.numeric(gdpData$X.3)
test
mean(test)
gdpData <- read.csv("gdp.csv")
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData$X.3 <- gsub(" ","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- gdpData[2:nrow(gdpData),]
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData$X.3 <- gsub(" ","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "")
gdpData <- gdpData[!bad_condition,]
View(gdpData)
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData$X.3 <- gsub(" ","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "" |  gdpData$Gross.domestic.product.2012 == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- gdpData[2:nrow(gdpData),]
View(gdpData)
mean(as.numeric(gdpData$X.3))
grep("^United",countryNames)
grep("^United",gdpData$X.2)
gdpData$X.2
grep("^United",gdpData$X.2)
grep("United",gdpData$X.2)
gdpData <- read.csv("gdp.csv")
grep("United",gdpData$X.2)
grep("^United",gdpData$X.2)
grep("^United",gdpData$X.2)
grep("^United",gdpData$X.2
gdpData$X.2
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
gdpData$X.3 <- gsub(" ","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "" |  gdpData$Gross.domestic.product.2012 == "")
gdpData <- gdpData[!bad_condition,]
gdpData <- gdpData[2:nrow(gdpData),]
mean(as.numeric(gdpData$X.3))
class(gdpData$X.2)
sapply(grep("^United"),gdpData$X.2)
as.character(gdpData$X.2)
grep("^United",as.character(gdpData$X.2))
class(as.character(gdpData$X.2))
grep("Alameda",cameraData$intersection)
cameraData <- read.csv("cameras.csv")
grep("Alameda",cameraData$intersection)
class(cameraData$intersection)
grep("^United",(gdpData$X.2))
gdpData <- read.csv("gdp.csv")
grep("^United",(gdpData$X.2))
View(gdpData)
Sys.setlocale('LC_ALL','C')
grep("^United",(gdpData$X.2))
View(gdpData)
length(grep("^United",gdpData$X.2))
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl1, destfile="edu.csv",method="curl")
eduData <- read.csv("edu.csv")
gdpData <- read.csv("gdp.csv")
View(gdpData)
View(eduData)
download.file(fileUrl2, destfile="edu.csv",method="curl")
eduData <- read.csv("edu.csv")
View(eduData)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, destfile="edu.csv",method="curl")
eduData <- read.csv("edu.csv")
View(eduData)
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=FALSE)
View(mergedData)
bad_condition = (mergedData$Gross.domestic.product.2012 == "")
mergedData <- mergedData[!bad_condition,]
View(mergedData)
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=FALSE)
length(grep("[Jj]une",gdpData$Special.Notes))
length(grep("[Jj]une",mergedData$Special.Notes))
bad_condition = (mergedData$Gross.domestic.product.2012 == "")
mergedData <- mergedData[!bad_condition,]
length(grep("[Jj]une",mergedData$Special.Notes))
length(grep("[Fiscal year end: June",mergedData$Special.Notes))
length(grep("Fiscal year end: June",mergedData$Special.Notes))
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
sampleTimes
length(grep("2012",amzn$Srow.names))
length(grep("^2012",amzn$Srow.names))
length(grep("^[2012]",amzn$Srow.names))
length(grep("^[2012]",amzn$row.names))
length(grep("^(2012)",amzn$row.names))
length(grep("^36.51",amzn$AMZN.High))
class(amzn)
test < -as.data.frame(amzn)
test
test <- as.data.frame(amzn)
View(test)
length(grep("^[2012]",test$row.names))
class(test)
View(test)
length(grep("38.68",test$AMZN.High))
length(grep("(38.68)",test$AMZN.High))
length(grep("^[2]",test$row.names))
length(test$row.names)
nrow(test)
test[,1]
test[,0]
test$row.names
test[1,]
test[1,][1]
test[1,][0]
test[1,][2]
test[1,][7]
test[0,]
numcol(test)
ncol(test)
names(test)
names(amazn)
names(amzn)
colnames(test)[1]="date"
View(test)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
length(grep("^[2012]",sampleTimes))
length(grep("^2012",sampleTimes))
sampleTimes <- sapply(sampleTimes, ymd)
library(lubridate);
sampleTimes <- sapply(sampleTimes, ymd)
sampleTimes
wday(sampleTime)
wday(sampleTimes)
wday(sampleTimes,labels=TRUE)
wday(sampleTimes,labels=TRUE)
wday(sampleTimes[1])
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
length(grep("^2012",sampleTimes))
library(lubridate);
ymd_hms("2011-08-03 10:15:03")
sampleTimes
ymd(2014-05-19)
library(lubridate)
library(lubridate)
ymd(2014-05-19)
ymd(20140519)
sampleTimes <- gsub("-","",sampleTimes)
sampleTimes
ymd(sampleTimes)
wday(sampleTime[1])
wday(sampleTimes[1])
x = dmy(c("1jan1960","2jan1960","31jan1960","30july1960"));
x
sampleTimes
sampleTimes
ymd(sampleTimes)
sampleTimes[1]
test <- sampleTimes[1]
wday(test)
x = dmy(c("1jan1960","2jan1960","31jan1960","30july1960"));
x[1]
sampleTimes[1]
sampleTimes <- gsub("-","",sampleTimes)
sampleTimes <- ymd(sampleTimes)
sampleTimes[1]
wday(sampleTimes[1])
wday(sampleTimes[1],labels=TRUE)
wday(sampleTimes[1],label=TRUE)
wday(sampleTimes[2],label=TRUE)
year(sampleTimes[2],label=TRUE)
condition = grep("^2012",sampleTimes);
condition
sampleTimes = index(amzn)
length(grep("^2012",sampleTimes))
condition = grep("^2012",sampleTimes);
sampleTimes <- sampleTimes[condition,]
library(lubridate);
sampleTimes <- gsub("-","",sampleTimes)
sampleTimes <- ymd(sampleTimes)
class(sampleTimes)
sampleTimes = index(amzn)
length(grep("^2012",sampleTimes))
library(lubridate);
sampleTimes <- gsub("-","",sampleTimes)
sampleTimes <- ymd(sampleTimes)
sampleTimes
year(sampleTimes)
index(year(sampleTimes))
index(year(sampleTimes)==2012)
index(year(sampleTimes))
year(sampleTimes) == 2012
condition1 <- (year(sampleTimes) == 2012)
sampleTimes <- sampleTimes[condition1,]
sampleTimes <- sampleTimes[condition1,]
sampleTimes <- sampleTimes[condition1]
sampleTimes
wday(sampleTimes)
length(wday(sampleTimes)==2)
wday(sampleTimes)==2
sum(wday(sampleTimes)==2)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
length(grep("^2012",sampleTimes))
library(lubridate);
sampleTimes <- gsub("-","",sampleTimes)
sampleTimes <- ymd(sampleTimes)
condition1 <- (year(sampleTimes) == 2012)
sampleTimes <- sampleTimes[condition1]
length(sampleTimes)
download.file(fileUrl1, destfile="gdp.csv",method="curl")
gdpData <- read.csv("gdp.csv")
gdpData$X.3 <- gsub(",","",gdpData$X.3,)
bad_condition = (gdpData$X.3 == ".." | is.na(gdpData$X.3) | gdpData$X.3 == "" | gdpData$X == "" |  gdpData$Gross.domestic.product.2012 == "")
gdpData <- gdpData[!bad_condition,]
mean(as.numeric(gdpData$X.3))

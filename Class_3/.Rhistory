data[data[1,]>40]
data[1]
data[1]>40
data[,1]
data[1,]
data[,1]>40
data[data[,1]>40]
data[(data[,1]>40)]
m = c(data)
m
dim(c)
dim(m)
class(m)
class(data)
m <- 1:10
class(m)
x <- matrix(1:6, 2, 3)
class(x)
x
m = matrix(data)
m
subset_1 <- subset (data, Ozone>41)
subset_1
subset_1 <- subset (data, Ozone>11 & Temop>90 )
subset_1 <- subset (data, Ozone>11 & Temp>90 )
subset_1
subset_1[,2]
mean(subset_1[,2])
subset_2 <- subset (data, Month == 6)
subset_2
mean(subset_2[,5])
mean(subset_2[,4])
subset_3 <- subset (data, Month == 5)
max(subset_3[,1])
subset_3
subset_3[,1]
max(subset_3[,1])
subset_3 <- subset (data, Month == 5, Ozone != NA)
subset_3 <- subset (data, Month == 5, Ozone >0)
subset_3
subset_3 <- subset (data, Month == 5, Ozone >10)
subset_3
subset_3 <- subset (data, Month == 5)
subset_3
subset_3 <- subset (data, Month == 5 & Ozone != NA)
subset_3
subset_3 <- subset (data, Month == 5 & Ozone == 41)
subset_3
subset_3 <- subset (data, Month == 5 & Ozone > 0)
subset_3
subset_3 <- subset (data, Month == 5 & Ozone > 0)
max(subset_3)
max(subset_3[,1])
library("rhdf5", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
created = h5createFile("example.h5")
created
created = h5createFile("example.h5")
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A,"example.h5","foo/A")
B = array(seq(0.1,2.0,by=0.1),dim=c(5,2))
attr(B,"scale") <- "liter"
h5write(B,"example.h5","foo/foobaa/B")
h5ls("example.h5")
df = data.frame(1L:5L,seq(0,1,length.out=5),c("ab","cde","fghi","a","s"),stringAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA = h5read("example.h5","foo/A")
readA = h5read("example.h5","foo/foobaa/B")
readdf = h5read("example.h5","df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5","foo/A")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(XML)
url <- "http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html <- htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html,"//title",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr)
install.packages("httr")
install.packages("httr")
library(httr)
html2 = GET(url)
content2 = content(html2,as="text")
parsedHtml = htmlParse(content2,asText=TRUE)
xpathSApply(html,"//title",xmlValue)
pg2 = GET("http://http://httpbin.org/basic-auth/user/passwd")
authenticate("user","passwd")
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd")
authenticate("user","passwd")
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd"),authenticate("user","passwd"))
pg2
pg2 = GET("http://httpbin.org/basic-auth/user/passwd",authenticate("user","passwd"))
pg2
google = handle("http://google.com")
pg1 = GET(handle=google,path="/")
pg2 = GET(handle=google,path="search")
pg1
pg2
myapp = oauth_app("twitter",key="4tRDkZMRxMd3msSEOiNFkQ",secret="aUqkQiRKPXRXIKyRdv64eVug5avgbmHPmkK6ews")
sig = sign_oauth1.0(myapp,token="51395803-hSMhx8QZA23TDT1NVRhllRnHgCRvnJHlgnh5rQKNC",token_secret="i2yrI5NH7O3Nkod45TJLg6DAZ5MNDH5n8HQchp5P55FRe")
homeTL = GET("https://api.twitter.com/1.1/statuses/home_timeline.json",sig)
homTL
homeTL
json1 = content(homeTL)
json2 = jsonLite::fromJSon(toJSON(json1))
json2[1,1:4]
json1 = content(homeTL)
json2 = jsonlite::fromJSon(toJSON(json1))
json2[1,1:4]
install.packages("jsonlite")
json1 = content(homeTL)
json2 = jsonlite::fromJSon(toJSON(json1))
json2[1,1:4]
json1 = content(homeTL)
json2 = jsonlite::fromJSon(toJSON(json1))
json2[1,1:4]
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json1
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
install.packages("rjson")
json1 = content(homeTL)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
json2 = jsonlite::fromJSON(toJSON(json1))
library(jsonlite)
json2 = jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
options(gsubfn.engine = "R")
require(sqldf)
x <- matrix(rnorm(200), 20, 10)
apply(x,2,mean)
apply(x,1,sum)
apply (x, 1, quantile, probs=(c(0.25,0.75)))
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a, c(1,2), mean)
a
dim(a)
x <- c (rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
f
tapply(x,f,mean)
tapply(x,f,mean,simplify=FALSE)
tapply(x,f,mean)
tapply(x,f,range)
x <- c (rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10) # f is a factor, whose has 3 levels and each level is repeated 10 times
split(x,f)
k <- split(x,f)
class(k)
k[1]
k['1']
k[1,]
x <- c (rnorm(10), runif(10), rnorm(10,1))
f <- gl(3,10) # f is a factor, whose has 3 levels and each level is repeated 10 times
lapply(split(x,f), mean)
library(dataset)
library(datasets)
head(airquality)
library(datasets)
head(airquality)
data = head(airquality)
data
class(data)
data[3]
data$Month
class(data$Month)
f <- gl(3,10)
class(f)
airquality$Month
class(airquality$Month)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[,"Ozone","Solar.R","Wind"]))
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone","Solar.R","Wind")], na.rm=TRUE))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
interaction(f1,f2)
interaction(f1,f2)
str(split(x,list(f1,f2)))
str(split(x,list(f1,f2),drop=TRUE))
noise <- function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
mapply(noise,1:5,1:5,2)
log(-1)
printmessage <- function(x){
if (x>0){
print("x is greater than zero")
}else{
print("x is less than zero")
}
invisible(x)
}
printmessage(10)
printmessage <- function(x){
if (x>0)
print("x is greater than zero")
else
print("x is less than zero")
invisible(x)
}
printmessage(10)
printmessage(NA)
printmessage <- function(x){
if (is.na(x))
print("x is a missing value")
else if (x>0)
print("x is greater than zero")
else
print("x is less than zero")
invisible(x)
}
printmessage(NA)
mean(x)
mean(adfadf)
traceback()
lm(adf-uhn)
traceback(0)
traceback()
debug(lm)
lm(k-o)
Q
ls
debug(ls)
ls()
library(reshape2)
head(mtcars)
mtcars$carname <-rownames(mtcars)
mtcars$carname
rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cycl"),measure.vars=c("mpg","hp"))
carMelt <- melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
View(mtcars)
View(mtcars)
View(carMelt)
View(mtcars)
cylData <- dcast(carMelt, cyl ~ variable)
View(cylData)
View(carMelt)
View(mtcars)
cylData <- dcast(carMelt, cyl ~ variable, mean)
View(cylData)
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
as.numeric(yesnofac)
spIns = split(InsectSprays$count, InsectSprays$spray)
spIns
sprCount = lapply(spIns, sum)
unlist(sprCount)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
source('~/.active-rstudio-document', echo=TRUE)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
install.packages("plyr")
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(plyr)
ddply(InsectSprays,.(spray),summarise,sum=sum(count))
ddply(InsectSprays,.(spray),summarise,sum=ave(count,FUN=sum))
fileUrl1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 = "https://dl.dropboxusercontent.com/u/7710864/data/solution-apr29.csv"
download.file(fileUrl1, destfile="reviews.csv",method="curl")
download.file(fileUrl2, destfile="solutions.csv",method="curl")
reviews <- read.csv("reviews.csv")
solutions <- read.csv("solutions.csv")
head(reviews,2)
head(solutions,2)
fileUrl2 = "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
download.file(fileUrl2, destfile="solutions.csv",method="curl")
solutions <- read.csv("solutions.csv")
head(solutions,2)
head(reviews,2)
names(reviews)
names(solutiona)
names(solutions)
mergedData = merge(reviews, solutions, by.x="solution_id", by.y="id",all=TRUE)
head(mergedData)
View(reviews)
View(solutions)
intersect(names(solutions),names(reviews))
mergedData2 = merge(reviews,solutions,all=TRUE)
head(mergedData2)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
arrange(join(df1,df2),id)
df3 = data.frame(id=sample(1:10),y=rnorm(10))
dfList = list(df1, df2, df3)
join_all(dfList)
df3 = data.frame(id=sample(1:10),z=rnorm(10))
dfList = list(df1, df2, df3)
join_all(dfList)
gdpData <- read.csv("gdp.csv")
head(gdpData,n=3)
setwd("~/Desktop/Coursera/Data_Science/datasciencecoursera/Class_3")
gdpData <- read.csv("gdp.csv")
head(gdpData,n=3)
download.file(fileUrl,destfile="education.csv",method="curl")
eduData <- read.csv("education.csv")
head(eduData,n=3)
View(eduData)
View(gdpData)
download.file(fileUrl,destfile="education.csv",method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl,destfile="education.csv",method="curl")
eduData <- read.csv("education.csv")
head(eduData,n=3)
View(eduData)
View(gdpData)
gdpData[!is.na(gpdData$X),]
gdpData
gdpData[!is.na(gdpData$X),]
!is.na(gdpData$X)
gdpData$X[1]
gdpData$X[2]
gdpData$X[6]
gdpData$X[1] == na
gdpData$X[1] == NA
gdpData$X[6] == "CHN"
gdpData$X[6] == ""
gdpData$X[1] == ""
!is.na(gdpData$X!="")
gdpData$X!=""
gdpData[gdpData$X!=""]
gdpData[gdpData$X!="",]
gdpData[which(gdpData$X),]
gdpData[gdpData$X!="" & gdpData$Gross.domestic.product.2012!="",]
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=TRUE)
View(mergedData)
gdpData <- gdpData[gdpData$X!="" & gdpData$Gross.domestic.product.2012!="",]
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=TRUE)
View(mergedData)
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=FALSE)
View(mergedData)
orderedMergedDatat <- mergedData[order(mergedData$Gross.domestic.product.2012,decreasing=TRUE),]
View(orderedMergedDatat)
orderedMergedDatat <- mergedData[order(mergedData$Gross.domestic.product.2012,increasing=TRUE),]
orderedMergedDatat <- mergedData[order(mergedData$Gross.domestic.product.2012,decreasing=FALSE),]
View(orderedMergedDatat)
sortedMergedDatat <- mergedData[sorted(mergedData$Gross.domestic.product.2012,decreasing=TRUE),]
sortedMergedDatat <- mergedData[sort(mergedData$Gross.domestic.product.2012,decreasing=TRUE),]
View(sortedMergedDatat)
sortedMergedDatat <- sort(mergedData$Gross.domestic.product.2012,decreasing=TRUE)
sortedMergedData <- sort(mergedData$Gross.domestic.product.2012,decreasing=TRUE)
sort(mergedData$Gross.domestic.product.2012,decreasing=TRUE)
X <- data.frame("var1"=sample(1:5),"var2"=sample(6:10),"var3"=sample(11:15))
X
sort(X$var1)15))
sort(X$var1)
X[order(X$var1),]
orderedMergedDatat <- mergedData[order(mergedData$Gross.domestic.product.2012),]
View(orderedMergedDatat)
(mergedData$Gross.domestic.product.2012)
as.numeric(mergedData$Gross.domestic.product.2012)
(mergedData$Gross.domestic.product.2012)[1]
length(mergedData$Gross.domestic.product.2012)
orderedMergedDatat <- mergedData[order(mergedData$X.3),]
View(orderedMergedDatat)
orderedMergedDatat <- mergedData[order(as.numeric(mergedData$X.3),]
order(mergedData$X.3)
class(X$var1)
as.numeric(as.character(Gross.domestic.product.2012))
as.numeric(as.character(mergedData$Gross.domestic.product.2012))
sort(as.numeric(as.character(mergedData$Gross.domestic.product.2012)))
orderedMergedDatat <- mergedData[mergedData(vector),]
vector <- as.numeric(as.character(mergedData$Gross.domestic.product.2012))
orderedMergedDatat <- mergedData[mergedData(vector),]
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=FALSE) # false because we want column with the same name
orderedMergedDatat <- mergedData[mergedData(vector),]
orderedMergedDatat <- mergedData[vector,]
View(orderedMergedDatat)
View(mergedData)
vector <- sort(as.numeric(as.character(mergedData$Gross.domestic.product.2012)))
orderedMergedDatat <- mergedData[mergedData$ross.domestic.product.2012==vector,]
View(orderedMergedDatat)
yesno <- sample(c("yes","no"),size=10,replace=TRUE)
yesno
yesnofac = factor(yesno,levels=c("yes","no"))
yesnofac
relevel(yesnofac,ref="yes")
mergedData$ross.domestic.product.2012 <- factor(mergedData$ross.domestic.product.2012,levels=1:190)
mergedData$ross.domestic.product.2012 <- factor(mergedData$ross.domestic.product.2012,levels=1:189)
1:189
length(mergedData$ross.domestic.product.2012)
length(mergedData$Gross.domestic.product.2012)
mergedData$Gross.domestic.product.2012 <- factor(mergedData$Gross.domestic.product.2012,levels=1:189)
mergedData$Gross.domestic.product.2012
mergedData = merge(gdpData, eduData, by.x="X", by.y="CountryCode",all=FALSE)
mergedData$Gross.domestic.product.2012
mergedData$Gross.domestic.product.2012[1]
class(mergedData$Gross.domestic.product.2012[1])
order(mergedData$Gross.domestic.product.2012)
orderedMergedDatat <- mergedData[order(mergedData$Gross.domestic.product.2012),]
View(orderedMergedDatat)
order(as.numeric(as.character(mergedData$Gross.domestic.product.2012)))
orderedMergedData <- ergedData[order(as.numeric(as.character(mergedData$Gross.domestic.product.2012))),]
orderedMergedData <- mergedData[order(as.numeric(as.character(mergedData$Gross.domestic.product.2012))),]
View(orderedMergedDatat)
View(orderedMergedData)
ordered_col_vector = order(as.numeric(as.character(mergedData$Gross.domestic.product.2012)))
orderedMergedData <- mergedData[ordered_col_vector,]
View(orderedMergedData)
head(InsectSprays)
tapply(InsectSprays$count, InsectSprays$spray, sum)
tapply(mergeredData$X.3, mergeredData$Income.Group, mean)
tapply(mergedData$X.3, mergedData$Income.Group, mean)
class(InsectSprays$count)
class(InsectSprays$spray)
InsectSprays
mergedData$X.3
as.numeri(mergedData$X.3)
as.numeric(mergedData$X.3)
as.numeric(mergedData$X.3)
(mergedData$X.3)
as.numeric(as.character(mergedData$X.3))
as.numeric(mergedData$X.3)
paste(mergedData$X.3)
test < -paste(mergedData$X.3)
test <- paste(mergedData$X.3)
as.numeric(test)
as.numeric(as.character(mergedData$Gross.domestic.product.2012))
test <- as.numeric(as.character(mergedData$Gross.domestic.product.2012))
test <- order(as.numeric(as.character(mergedData$Gross.domestic.product.2012)))
test
test <- order(as.numeric(as.character(orderedMegedData$Gross.domestic.product.2012)))
test <- order(as.numeric(as.character(orderedMergedData$Gross.domestic.product.2012)))
test
test <- as.numeric(as.character(orderedMergedData$Gross.domestic.product.2012))
test
tapply(test, mergedData$Income.Group, mean)
mergeredData[mergeredData$Income.Group="High income: nonOECD",]
mergeredData[mergeredData$Income.Group == "High income: nonOECD",]
mergedData[mergedData$Income.Group == "High income: nonOECD",]
test <- mergedData[mergedData$Income.Group == "High income: nonOECD",]
View(test)
tapply(mergedData$Gross.domestic.product.2012, mergedData$Income.Group, mean)
tapply(order(as.numeric(as.character(mergedData$Gross.domestic.product.2012))), mergedData$Income.Group, mean)
test <- mergedData[mergedData$Income.Group == "High income: OECD",]
test
View(test)
colmeans(X$Gross.domestic.product.2012)
colMeans(X$Gross.domestic.product.2012)
colMeans(test)
colMeans(test$Gross.domestic.product.2012)
class(restData$councilDistrict)
class(test$Gross.domestic.product.2012)
test$gdp <- test$Gross.domestic.product.2012
test
View(test)
test$gdp
labes(test$gdp)
labels(test$gdp)
test$gdp
as.numeric(test$gdp)
as.numeric(as.character(test$gdp)))
as.numeric(as.character(test$gdp))
mean(as.numeric(as.character(test$gdp)))
View(gdpData)
tapply(as.numeric(as.character(mergedData$Gross.domestic.product.2012)),mergedData$Income.Group,mean)
class(restData$zipGroups)
mergedData$gdpGroups = cut(mergedData$Gross.domestic.product.2012, breaks=quantile(mergedData$Gross.domestic.product.2012))
class(restData$zipCode)
mergedData$gdpGroups <- cut(as.numeric(as.character(mergedData$Gross.domestic.product.2012)), breaks=quantile(as.character(mergedData$Gross.domestic.product.2012))))
mergedData$gdpGroups <- cut(as.numeric(as.character(mergedData$Gross.domestic.product.2012)), breaks=quantile(as.character(mergedData$Gross.domestic.product.2012)))
gdpVector <- as.numeric(as.character(mergedData$Gross.domestic.product.2012))
gdpVector
mergedData$gdpGroupscut(gdpVector,breaks=quantile(gdpVector))
mergedData$gdpGroups= cut(gdpVector,breaks=quantile(gdpVector))
View(mergedData)
mergedData$gdpGroups = cut2(gdpVector, g=5)
library(Hmisc)
mergedData$gdpGroups = cut2(gdpVector, g=5)
mergedData$gdpGroups
table(mergedData$gdpGroups,mergedData$Income.Group)
View(orderedMergedData)
View(orderedMergedDatat)
View(orderedMergedData)
View(eduData)
eduData[eduData$CountryCode,]
eduData$CountryCode
testEdu <- as.character(eduData$CountryCode)
testEdu
testGdp <- as.character(gdp$X)
testGdp <- as.character(gdpData$X)
testGDP
testGdp
duplicate(testGdp)
testGdp == testEdu
ordered_col_vector = order(as.numeric(as.character(mergedData$Gross.domestic.product.2012)),decreasing=TRUE)
orderedMergedData <- mergedData[ordered_col_vector,]
View(orderedMergedData)
